/**
 * cli.js
 * Created by raul on 11/18/14.
 */

var flatiron = require('flatiron'),
    path = require('path'),
    exit = require('exit'),
    RSVP = require('rsvp'),
    chalk = require('chalk');

require('pkginfo')(module, 'name', 'version');

var app = module.exports = flatiron.app;

app.version = exports.version;

app.config.file({ file: path.join(__dirname, 'config', 'config.json') });

app.use(flatiron.plugins.cli, {
  version: true,
  source: path.join(__dirname, 'commands'),
  usage: require("./usage"),
  argv: {
    version: {
      alias: 'v',
      description: 'print base version and exit',
      boolean: true
    },
    "skip-npm": {
      alias: 'n',
      description: 'skips installing packages for tooling via npm.',
      boolean: true
    },
    "skip-bower": {
      alias: 'b',
      description: 'skips installing browser packages via bower.',
      boolean: true
    },
    "production": {
      alias: 'p',
      description: 'minifies JavaScript and CSS at build time.',
      boolean: true
    }
  }
});

//console.log(app.argv);

// app.start = function (callback) {
	
//   app.argv.colors || (chalk.enabled = true);

// 	app.init(function (err) {
// 		if (err) {
// 			return callback(err);
// 		}

// 		app.router.dispatch('on', app.argv._.join(' '), app.log, function (err) {
// 			callback(err);
// 		});
// 	});
// };

/**
 * Handle exceptions.
 */

function formatError(e) {
  if (!e.err) {
    return e.message;
  }

  // PluginError
  if (typeof e.err.showStack === 'boolean') {
    return e.err.toString();
  }

  // normal error
  if (e.err.stack) {
    return e.err.stack;
  }

  // unknown (string, number, etc.)
  return new Error(String(e.err)).stack;
}

errorHandler = function(e) {
  if (e.err) {
    app.log.error(formatError(e));
  }
  else  if (e.stack) {
    app.log.error(e.stack);
  } else {
    app.log.error(e.message);
  }
  exit(1);
}


RSVP.on('error', errorHandler);
process.on('uncaughtException', errorHandler);